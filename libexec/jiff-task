#!/usr/bin/env bash
# Usage: jiff task add|edit|publish|remove|show TASK
# Summary: Manage jiff tasks

source std.sh

std::set_default "EDITOR" "/usr/bin/vim"
std::set_default "PAGER"  "/usr/bin/less"

main() {
  case "${1:-}" in
    "--complete" )
      echo_completions
      ;;
    "add" | "publish" | "edit" | "show" | "remove" )
      argument_or_exit "${2:-}"
      execute_task "$@"
      ;;
    * )
      usage
      ;;
  esac
}

argument_or_exit() {
  if std::is_empty "$1"; then
    usage
    exit 0
  fi
}

copy_sample_task() {
  local filename="$1"

  install -m 755 "${_JIFF_ROOT}/share/jiff/jiff-sample-task" "${filename}"
  sed -i -e "s|jiff sample-task|jiff $2|" "${filename}"
  if std::shell_is_bash && std::is_file "${HOME}/.bash_history"; then
    printf "" >> "${filename}"
    tail -50 "${HOME}/.bash_history" >> "${filename}"
  fi
}

echo_completions() {
# Provide jiff completions
  cat <<EOM
add
edit
publish
remove
show
EOM
  exit 0
}

execute_task() {
  local taskname
  local filename
  local task_dir

  taskname="$2"
  filename="jiff-${taskname}"
  task_dir="$(set_taskdir "${3:-}")"
  std::push_dir "${task_dir}"
  case "$1" in
    "add" )
      git_add_task "${filename}" "${taskname}"
      std::make_symlink "${_JIFF_ROOT}/libexec/${filename}" "../context/current/${filename}"
      ;;
    "edit" )
      git_edit_task "${filename}"
      ;;
    "publish" )
      git_publish_task "${filename}"
      ;;
    "remove" )
      git_remove_task "${filename}"
      ;;
    "show" )
      "${PAGER}" "${filename}"
      ;;
  esac
  std::pop_dir
}

git_add_task() {
  local filename="$1"

  std::exit_if_is_file "${filename}"
  copy_sample_task "${filename}" "$2"
  "${EDITOR}" "${filename}"
  git add "${filename}"
}

git_edit_task() {
  local filename="$1"

  "${EDITOR}" "${filename}"
  git add "${filename}"
}

git_publish_task() {
  local filename="$1"

  git add "${filename}"
  git commit --message "automated commit"
  git push
}

git_remove_task() {
  git rm "$1"
  git commit --message "automated commit"
  git push
}

set_taskdir() {
  case "$1" in
    "default" )
      printf "%s/role/current" "${_JIFF_ROOT}"
      ;;
    * )
      printf "%s/context/current" "${_JIFF_ROOT}"
  esac
}

usage() {
  printf "Usage: jiff task add|edit|remove|publish|show TASK [default]\n"
}

return 0 2>/dev/null || true
std::strict_mode on
main "$@"
